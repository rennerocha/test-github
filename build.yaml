- NS="test_project-sandbox"
- apt-get update && apt-get install --no-install-recommends -y curl sudo git
- pip3 install awscli
- aws configure set aws_access_key_id "${AWS_KEY}"
- aws configure set aws_secret_access_key "${AWS_SECRET}"
- eval $(aws ecr get-login --no-include-email --region ${AWS_REGION} | sed 's;https://;;g')
# install kubectl
- curl -Lo /tmp/kubectl "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
- curl -Lo /tmp/kubectl.sha256 "https://dl.k8s.io/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl.sha256"
- echo "$(cat /tmp/kubectl.sha256) /tmp/kubectl" | sha256sum --check
- install -o root -g root -m 0755 /tmp/kubectl /usr/local/bin/kubectl
# get kubeconfig from repository variables
- echo $KUBE_CONFIG_SANDBOX | base64 -d > kubeconfig
- export KUBECONFIG="kubeconfig"
- kubectl config use-context best-ec2-dev-cluster
# update regcred
- echo $(aws ecr get-login-password)
- kubectl delete secret regcred --namespace=$NS --ignore-not-found
- kubectl create secret docker-registry regcred --docker-server=385556909832.dkr.ecr.us-east-1.amazonaws.com --docker-username=AWS --docker-password=$(aws ecr get-login-password --region ${AWS_REGION}) --namespace=$NS
# create secrets for CloudNativePG
- kubectl delete secret aws-creds --namespace=$NS --ignore-not-found
- kubectl delete secret app-secret --namespace=$NS --ignore-not-found
- kubectl delete secret superuser-secret --namespace=$NS --ignore-not-found
- kubectl create secret generic aws-creds --from-literal=ACCESS_KEY_ID=${AWS_KEY} --from-literal=ACCESS_SECRET_KEY=${AWS_SECRET} --namespace=$NS
- kubectl create secret generic app-secret --from-literal=password=$POSTGRES_PASSWORD --from-literal=username=sfu_best --namespace=$NS
- kubectl create secret generic superuser-secret --from-literal=password=$POSTGRES_PASSWORD --from-literal=username=postgres --namespace=$NS
- export DOCKER_BUILDKIT=1
- echo "NEXT_PUBLIC_API_BASE_URL=https://test_project.sandbox.api.sixfeetup.com/" > ./frontend/.env
- FRONTEND_IMAGE="${ECR_REPO_FRONTEND}"
- docker build -t $FRONTEND_IMAGE:$BITBUCKET_COMMIT  -t $FRONTEND_IMAGE:latest frontend
- docker push $FRONTEND_IMAGE -a
- BACKEND_IMAGE="${ECR_REPO_BACKEND}"
- docker build -t $BACKEND_IMAGE:$BITBUCKET_COMMIT  -t $BACKEND_IMAGE:latest backend
- docker push $BACKEND_IMAGE -a
# install kustomize
- URL=https://github.com/kubernetes-sigs/kustomize/releases/download/kustomize%2Fv5.0.3/kustomize_v5.0.3_linux_amd64.tar.gz
- curl -L $URL | tar zx
- sudo chmod +x ./kustomize
- sudo mv ./kustomize /usr/local/bin/
# edit images
- cd deploy/sandbox
- FRONTEND_IMAGE="${ECR_REPO_FRONTEND}"
- kustomize edit set image best-frontend=$FRONTEND_IMAGE:$BITBUCKET_COMMIT
- BACKEND_IMAGE="${ECR_REPO_BACKEND}"
- kustomize edit set image best-backend=$BACKEND_IMAGE:$BITBUCKET_COMMIT
# commit & push
- git add kustomization.yaml
- git commit -am "[skip ci] Tag Images"
- git push